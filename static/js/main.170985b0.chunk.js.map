{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","todo","criterion","selectedTodo","handleInput","event","setState","target","value","handleSelect","selectUser","userId","todoId","props","this","todos","listHasLoaded","preparedTodos","filter","item","completed","title","toLowerCase","includes","className","type","name","placeholder","onChange","map","classNames","key","id","checked","readOnly","onClick","React","Component","getUser","fetch","then","user","json","data","CurrentUser","prevProps","email","phone","clearUser","App","selectedUserId","hasLoaded","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.170985b0.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    todo: '',\n    criterion: '',\n    selectedTodo: 0,\n  };\n\n  handleInput = (event) => {\n    this.setState({ todo: event.target.value });\n  };\n\n  handleSelect = (event) => {\n    this.setState({ criterion: event.target.value });\n  };\n\n  selectUser = (userId, todoId) => {\n    this.setState({ selectedTodo: todoId });\n    this.props.selectUser(userId);\n  };\n\n  render() {\n    const { todos, listHasLoaded } = this.props;\n    const { todo, criterion, selectedTodo } = this.state;\n\n    const preparedTodos = todos\n      .filter((item) => {\n        switch (criterion) {\n          case 'active':\n            return !item.completed;\n          case 'completed':\n            return item.completed;\n          default:\n            return true;\n        }\n      })\n      .filter((item) => {\n        if (item.title === null) {\n          return;\n        }\n\n        return item.title.toLowerCase().includes(todo.toLowerCase());\n      });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__form\">\n          <input\n            type=\"text\"\n            className=\"TodoList__input\"\n            name=\"todo\"\n            value={todo}\n            placeholder=\"Enter a todo\"\n            onChange={this.handleInput}\n          />\n          <select\n            name=\"criterion\"\n            value={criterion}\n            onChange={this.handleSelect}\n            className=\"TodoList__select\"\n          >\n            <option value=\"all\">All Todos</option>\n            <option value=\"active\">Active todos</option>\n            <option value=\"completed\">Completed todos</option>\n          </select>\n        </div>\n        <div className=\"TodoList__list-container\">\n          {listHasLoaded ? (\n            <ul className=\"TodoList__list\">\n              {preparedTodos.map(item => (\n                <li\n                  className={classNames('TodoList__item', {\n                    'TodoList__item--unchecked': !item.completed,\n                    'TodoList__item--checked': item.completed,\n                  })}\n                  key={item.id}\n                >\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={item.completed}\n                      readOnly\n                    />\n                    <p>{item.title}</p>\n                  </label>\n                  <button\n                    type=\"button\"\n                    onClick={() => this.selectUser(item.userId, item.id)}\n                    className={classNames('button', 'TodoList__user-button', {\n                      'TodoList__user-button--selected': item.id === selectedTodo,\n                    })}\n                  >\n                    {`User #${item.userId}`}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p>The todos are loading...</p>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool,\n    createdAt: PropTypes.string.isRequired,\n    updatedAt: PropTypes.string.isRequired,\n  })).isRequired,\n  listHasLoaded: PropTypes.bool.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","const TODOS_URL = 'https://mate-api.herokuapp.com/todos';\nconst USERS_URL = 'https://mate-api.herokuapp.com/users';\n\nexport const getTodos = () => fetch(TODOS_URL)\n  .then(todos => todos.json())\n  .then(todos => todos.data);\n\nexport const getUser = userId => fetch(`${USERS_URL}/${userId}`)\n  .then(user => user.json())\n  .then(user => user.data);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\n\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    const { userId } = this.props;\n\n    const user = await getUser(userId);\n\n    this.setState({ user });\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n\n    const user = await getUser(this.props.userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <p>User's info is loading...</p>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${user.id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear\"\n          onClick={this.props.clearUser}\n        >\n          Clear user\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    hasLoaded: false,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({\n      todos,\n      hasLoaded: true,\n    });\n  }\n\n  selectUser = (userId) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { todos, selectedUserId, hasLoaded } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            listHasLoaded={hasLoaded}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}